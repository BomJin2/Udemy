{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bomjin\\\\Desktop\\\\ureact\\\\21-adv-starting-project\\\\frontend\\\\src\\\\App.js\";\n// 도전/연습\n\n// 1. 5개의 새로운 (더미) 페이지 구성 요소를 추가합니다(콘텐츠는 간단한 <h1> 요소일 수 있음).\n// - HomePage\n// - EventsPage\n// - EventDetailPage\n// - NewEventPage\n// - EditEventPage\n// 2. 이 5개 페이지에 대한 라우팅 및 경로 정의를 추가합니다.\n// - / => HomePage\n// - /events => EventsPage\n// - /events/<some-id> => EventDetailPage\n// - /events/new => NewEventPage\n// - /events/<some-id>/edit => EditEventPage\n// 3. 모든 페이지 구성 요소 위에 <MainNavigation> 구성 요소를 추가하는 루트 레이아웃을 추가합니다.\n// 4. MainNavigation에 제대로 작동하는 링크를 추가합니다.\n// 5. MainNavigation의 링크가 활성화될 때 \"active\" 클래스를 받는지 확인합니다.\n// 6. 더미 이벤트 목록을 출력합니다. EventsPage\n// 모든 목록 항목에는 해당 EventDetailPage에 대한 링크가 포함되어야 합니다.\n// 7. EventDetailPage에서 선택한 이벤트의 ID를 출력합니다.\n// 보너스: 모든 /events... 페이지 구성 요소 위에 <EventNavigation> 구성 요소를 추가하는 또 다른 (중첩된) 레이아웃 경로를 추가합니다.\n\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\nimport HomePage from \"./pages/HomePage\";\nimport EventDetailPage from \"./pages/EventDetailPage\";\nimport NewEventPage from \"./pages/NewEventPage\";\nimport EditEventPage from \"./pages/EditEventPage\";\nimport RootLayout from \"./pages/RootLayout\";\nimport EventRoot from \"./pages/EventRoot\";\nimport EventsPage from \"./pages/EventsPage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  const router = createBrowserRouter([{\n    path: \"/\",\n    element: /*#__PURE__*/_jsxDEV(RootLayout, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 16\n    }, this),\n    children: [{\n      index: true,\n      element: /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 33\n      }, this)\n    }, {\n      path: \"events\",\n      element: /*#__PURE__*/_jsxDEV(EventRoot, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 20\n      }, this),\n      children: [{\n        index: true,\n        element: /*#__PURE__*/_jsxDEV(EventsPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 24\n        }, this),\n        loader: async () => {\n          const response = await fetch(\"http://localhost:8080/events\");\n          if (!response.ok) {\n            setError(\"Fetching events failed.\");\n          } else {\n            const resData = await response.json();\n            setFetchedEvents(resData.events);\n          }\n        }\n      }, {\n        path: \":id\",\n        element: /*#__PURE__*/_jsxDEV(EventDetailPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 37\n        }, this)\n      }, {\n        path: \"new\",\n        element: /*#__PURE__*/_jsxDEV(NewEventPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 37\n        }, this)\n      }, {\n        path: \":id/edit\",\n        element: /*#__PURE__*/_jsxDEV(EditEventPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 42\n        }, this)\n      }]\n    }]\n  }]);\n  return /*#__PURE__*/_jsxDEV(RouterProvider, {\n    router: router\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 10\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["createBrowserRouter","RouterProvider","HomePage","EventDetailPage","NewEventPage","EditEventPage","RootLayout","EventRoot","EventsPage","jsxDEV","_jsxDEV","App","router","path","element","fileName","_jsxFileName","lineNumber","columnNumber","children","index","loader","response","fetch","ok","setError","resData","json","setFetchedEvents","events","_c","$RefreshReg$"],"sources":["C:/Users/Bomjin/Desktop/ureact/21-adv-starting-project/frontend/src/App.js"],"sourcesContent":["// 도전/연습\n\n// 1. 5개의 새로운 (더미) 페이지 구성 요소를 추가합니다(콘텐츠는 간단한 <h1> 요소일 수 있음).\n// - HomePage\n// - EventsPage\n// - EventDetailPage\n// - NewEventPage\n// - EditEventPage\n// 2. 이 5개 페이지에 대한 라우팅 및 경로 정의를 추가합니다.\n// - / => HomePage\n// - /events => EventsPage\n// - /events/<some-id> => EventDetailPage\n// - /events/new => NewEventPage\n// - /events/<some-id>/edit => EditEventPage\n// 3. 모든 페이지 구성 요소 위에 <MainNavigation> 구성 요소를 추가하는 루트 레이아웃을 추가합니다.\n// 4. MainNavigation에 제대로 작동하는 링크를 추가합니다.\n// 5. MainNavigation의 링크가 활성화될 때 \"active\" 클래스를 받는지 확인합니다.\n// 6. 더미 이벤트 목록을 출력합니다. EventsPage\n// 모든 목록 항목에는 해당 EventDetailPage에 대한 링크가 포함되어야 합니다.\n// 7. EventDetailPage에서 선택한 이벤트의 ID를 출력합니다.\n// 보너스: 모든 /events... 페이지 구성 요소 위에 <EventNavigation> 구성 요소를 추가하는 또 다른 (중첩된) 레이아웃 경로를 추가합니다.\n\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\nimport HomePage from \"./pages/HomePage\";\nimport EventDetailPage from \"./pages/EventDetailPage\";\nimport NewEventPage from \"./pages/NewEventPage\";\nimport EditEventPage from \"./pages/EditEventPage\";\nimport RootLayout from \"./pages/RootLayout\";\nimport EventRoot from \"./pages/EventRoot\";\nimport EventsPage from \"./pages/EventsPage\";\n\nfunction App() {\n  const router = createBrowserRouter([\n    {\n      path: \"/\",\n      element: <RootLayout />,\n      children: [\n        { index: true, element: <HomePage /> },\n        {\n          path: \"events\",\n          element: <EventRoot />,\n\n          children: [\n            {\n              index: true,\n              element: <EventsPage />,\n              loader: async () => {\n                const response = await fetch(\"http://localhost:8080/events\");\n\n                if (!response.ok) {\n                  setError(\"Fetching events failed.\");\n                } else {\n                  const resData = await response.json();\n                  setFetchedEvents(resData.events);\n                }\n              },\n            },\n            { path: \":id\", element: <EventDetailPage /> },\n            { path: \"new\", element: <NewEventPage /> },\n            { path: \":id/edit\", element: <EditEventPage /> },\n          ],\n        },\n      ],\n    },\n  ]);\n  return <RouterProvider router={router} />;\n}\n\nexport default App;\n"],"mappings":";AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,mBAAmB,EAAEC,cAAc,QAAQ,kBAAkB;AACtE,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,eAAe,MAAM,yBAAyB;AACrD,OAAOC,YAAY,MAAM,sBAAsB;AAC/C,OAAOC,aAAa,MAAM,uBAAuB;AACjD,OAAOC,UAAU,MAAM,oBAAoB;AAC3C,OAAOC,SAAS,MAAM,mBAAmB;AACzC,OAAOC,UAAU,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,GAAGA,CAAA,EAAG;EACb,MAAMC,MAAM,GAAGZ,mBAAmB,CAAC,CACjC;IACEa,IAAI,EAAE,GAAG;IACTC,OAAO,eAAEJ,OAAA,CAACJ,UAAU;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;IACvBC,QAAQ,EAAE,CACR;MAAEC,KAAK,EAAE,IAAI;MAAEN,OAAO,eAAEJ,OAAA,CAACR,QAAQ;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAE,CAAC,EACtC;MACEL,IAAI,EAAE,QAAQ;MACdC,OAAO,eAAEJ,OAAA,CAACH,SAAS;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;MAEtBC,QAAQ,EAAE,CACR;QACEC,KAAK,EAAE,IAAI;QACXN,OAAO,eAAEJ,OAAA,CAACF,UAAU;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;QACvBG,MAAM,EAAE,MAAAA,CAAA,KAAY;UAClB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;UAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;YAChBC,QAAQ,CAAC,yBAAyB,CAAC;UACrC,CAAC,MAAM;YACL,MAAMC,OAAO,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;YACrCC,gBAAgB,CAACF,OAAO,CAACG,MAAM,CAAC;UAClC;QACF;MACF,CAAC,EACD;QAAEhB,IAAI,EAAE,KAAK;QAAEC,OAAO,eAAEJ,OAAA,CAACP,eAAe;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE,CAAC,EAC7C;QAAEL,IAAI,EAAE,KAAK;QAAEC,OAAO,eAAEJ,OAAA,CAACN,YAAY;UAAAW,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE,CAAC,EAC1C;QAAEL,IAAI,EAAE,UAAU;QAAEC,OAAO,eAAEJ,OAAA,CAACL,aAAa;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE,CAAC;IAEpD,CAAC;EAEL,CAAC,CACF,CAAC;EACF,oBAAOR,OAAA,CAACT,cAAc;IAACW,MAAM,EAAEA;EAAO;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC3C;AAACY,EAAA,GAnCQnB,GAAG;AAqCZ,eAAeA,GAAG;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}