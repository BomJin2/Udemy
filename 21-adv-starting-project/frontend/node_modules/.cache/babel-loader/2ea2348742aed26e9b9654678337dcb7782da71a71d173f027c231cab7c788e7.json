{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bomjin\\\\Desktop\\\\ureact\\\\21-adv-starting-project\\\\frontend\\\\src\\\\App.js\";\n// 도전/연습\n\n// 1. 5개의 새로운 (더미) 페이지 구성 요소를 추가합니다(콘텐츠는 간단한 <h1> 요소일 수 있음).\n// - HomePage\n// - EventsPage\n// - EventDetailPage\n// - NewEventPage\n// - EditEventPage\n// 2. 이 5개 페이지에 대한 라우팅 및 경로 정의를 추가합니다.\n// - / => HomePage\n// - /events => EventsPage\n// - /events/<some-id> => EventDetailPage\n// - /events/new => NewEventPage\n// - /events/<some-id>/edit => EditEventPage\n// 3. 모든 페이지 구성 요소 위에 <MainNavigation> 구성 요소를 추가하는 루트 레이아웃을 추가합니다.\n// 4. MainNavigation에 제대로 작동하는 링크를 추가합니다.\n// 5. MainNavigation의 링크가 활성화될 때 \"active\" 클래스를 받는지 확인합니다.\n// 6. 더미 이벤트 목록을 출력합니다. EventsPage\n// 모든 목록 항목에는 해당 EventDetailPage에 대한 링크가 포함되어야 합니다.\n// 7. EventDetailPage에서 선택한 이벤트의 ID를 출력합니다.\n// 보너스: 모든 /events... 페이지 구성 요소 위에 <EventNavigation> 구성 요소를 추가하는 또 다른 (중첩된) 레이아웃 경로를 추가합니다.\n\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\nimport MainNavigation from \"./components/MainNavigation\";\nimport EventsPage from \"./pages/EventsPage\";\nimport HomePage from \"./pages/HomePage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  const router = createBrowserRouter([{\n    path: \"/\",\n    element: /*#__PURE__*/_jsxDEV(MainNavigation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 16\n    }, this),\n    children: [{\n      index: true,\n      element: /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 33\n      }, this)\n    }, {\n      path: \"events\",\n      element: /*#__PURE__*/_jsxDEV(EventsPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 36\n      }, this)\n    }, {\n      path: \"events/:id\",\n      element: /*#__PURE__*/_jsxDEV(EventsPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 40\n      }, this)\n    }, {\n      path: \"events/new\",\n      element: /*#__PURE__*/_jsxDEV(EventsPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 40\n      }, this)\n    }]\n  }]);\n  return /*#__PURE__*/_jsxDEV(RouterProvider, {\n    router: router\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 10\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["createBrowserRouter","RouterProvider","MainNavigation","EventsPage","HomePage","jsxDEV","_jsxDEV","App","router","path","element","fileName","_jsxFileName","lineNumber","columnNumber","children","index","_c","$RefreshReg$"],"sources":["C:/Users/Bomjin/Desktop/ureact/21-adv-starting-project/frontend/src/App.js"],"sourcesContent":["// 도전/연습\n\n// 1. 5개의 새로운 (더미) 페이지 구성 요소를 추가합니다(콘텐츠는 간단한 <h1> 요소일 수 있음).\n// - HomePage\n// - EventsPage\n// - EventDetailPage\n// - NewEventPage\n// - EditEventPage\n// 2. 이 5개 페이지에 대한 라우팅 및 경로 정의를 추가합니다.\n// - / => HomePage\n// - /events => EventsPage\n// - /events/<some-id> => EventDetailPage\n// - /events/new => NewEventPage\n// - /events/<some-id>/edit => EditEventPage\n// 3. 모든 페이지 구성 요소 위에 <MainNavigation> 구성 요소를 추가하는 루트 레이아웃을 추가합니다.\n// 4. MainNavigation에 제대로 작동하는 링크를 추가합니다.\n// 5. MainNavigation의 링크가 활성화될 때 \"active\" 클래스를 받는지 확인합니다.\n// 6. 더미 이벤트 목록을 출력합니다. EventsPage\n// 모든 목록 항목에는 해당 EventDetailPage에 대한 링크가 포함되어야 합니다.\n// 7. EventDetailPage에서 선택한 이벤트의 ID를 출력합니다.\n// 보너스: 모든 /events... 페이지 구성 요소 위에 <EventNavigation> 구성 요소를 추가하는 또 다른 (중첩된) 레이아웃 경로를 추가합니다.\n\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\nimport MainNavigation from \"./components/MainNavigation\";\nimport EventsPage from \"./pages/EventsPage\";\nimport HomePage from \"./pages/HomePage\";\n\nfunction App() {\n  const router = createBrowserRouter([\n    {\n      path: \"/\",\n      element: <MainNavigation />,\n      children: [\n        { index: true, element: <HomePage /> },\n        { path: \"events\", element: <EventsPage /> },\n        { path: \"events/:id\", element: <EventsPage /> },\n        { path: \"events/new\", element: <EventsPage /> },\n      ],\n    },\n  ]);\n  return <RouterProvider router={router} />;\n}\n\nexport default App;\n"],"mappings":";AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,mBAAmB,EAAEC,cAAc,QAAQ,kBAAkB;AACtE,OAAOC,cAAc,MAAM,6BAA6B;AACxD,OAAOC,UAAU,MAAM,oBAAoB;AAC3C,OAAOC,QAAQ,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,GAAGA,CAAA,EAAG;EACb,MAAMC,MAAM,GAAGR,mBAAmB,CAAC,CACjC;IACES,IAAI,EAAE,GAAG;IACTC,OAAO,eAAEJ,OAAA,CAACJ,cAAc;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;IAC3BC,QAAQ,EAAE,CACR;MAAEC,KAAK,EAAE,IAAI;MAAEN,OAAO,eAAEJ,OAAA,CAACF,QAAQ;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAE,CAAC,EACtC;MAAEL,IAAI,EAAE,QAAQ;MAAEC,OAAO,eAAEJ,OAAA,CAACH,UAAU;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAE,CAAC,EAC3C;MAAEL,IAAI,EAAE,YAAY;MAAEC,OAAO,eAAEJ,OAAA,CAACH,UAAU;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAE,CAAC,EAC/C;MAAEL,IAAI,EAAE,YAAY;MAAEC,OAAO,eAAEJ,OAAA,CAACH,UAAU;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAE,CAAC;EAEnD,CAAC,CACF,CAAC;EACF,oBAAOR,OAAA,CAACL,cAAc;IAACO,MAAM,EAAEA;EAAO;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC3C;AAACG,EAAA,GAdQV,GAAG;AAgBZ,eAAeA,GAAG;AAAC,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}